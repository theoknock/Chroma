kernel vec4 directionalMeanKernel(sampler u, float inputUnits, float inputNorth, float inputSouth, float inputEast, float inputWest)
{
vec4 pixel = unpremultiply(sample(u, samplerCoord(u)));
vec2 xy = destCoord();

/* First median */
int northBounds = (int(inputNorth) - 1) / 2;
int southBounds = (int(inputSouth) - 1) / 2;
int eastBounds = (int(inputEast) - 1) / 2;
int westBounds = (int(inputWest) - 1) / 2;
vec4 sum  = vec4(0.0);
for (int i = (0 - northBounds); i <= southBounds; i++)
{
sum += unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, 0)))));
}

for (int j = (0 - eastBounds); j <= westBounds; j++ )
{
sum += unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(0, j)))));
}

int divisor = (northBounds + southBounds) + (eastBounds + westBounds);
vec4 mean = vec4(sum / vec4(divisor));
float mean_avg = float(mean);
float comp_avg = 0.0;
vec4 comp  = vec4(0.0);
vec4 median_1  = mean;

for (int i = (0 - northBounds); i <= southBounds; i++)
{
comp = unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, 0)))));
comp_avg = float(comp);
median_1 = (comp_avg < mean_avg) ? max(median_1, comp) : median_1 ;
}

for (int j = (0 - eastBounds); j <= westBounds; j++ )
{
comp = unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(0, j)))));
comp_avg = float(comp);
median_1 = (comp_avg < mean_avg) ? max(median_1, comp) : median_1 ;
}

/* Second median minus first median */
vec4 sum_2  = vec4(0.0);

for (int i = (0 - northBounds); i <= southBounds; i++)
{
sum_2 += median_1 - unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, i)))));
}

for (int j = (0 - eastBounds); j <= westBounds; j++ )
{
sum_2 += median_1 - unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(j, j)))));
}
vec4 mean_2 = vec4(sum_2 / vec4(divisor));
vec4 median_2  = mean_2;
float mean_avg_2 = float(mean_2);
float comp_avg_2 = 0.0;
vec4 comp_2  = vec4(0.0);

for (int i = (0 - northBounds); i <= southBounds; i++)
{
comp_2 = unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, i)))));
comp_avg_2 = float(comp_2);
median_2 = (comp_avg_2 < mean_avg_2) ? max(median_2, comp_2) : median_2 ;
}

for (int j = (0 - eastBounds); j <= westBounds; j++ )
{
comp_2 = unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(j, j)))));
comp_avg_2 = float(comp_2);
median_2 = (comp_avg_2 < mean_avg_2) ? max(median_2, comp_2) : median_2 ;
}

return premultiply(vec4(vec3(abs(pixel.rgb - median_2.rgb)), 1.0));

}