kernel vec4 shiftedDataVarianceKernel(sampler u, float inputUnits, float inputNorth, float inputSouth, float inputEast, float inputWest)
{
vec4 pixel = unpremultiply(sample(u, samplerCoord(u)));
vec2 xy = destCoord();
vec4 sum  = vec4(0.0);

vec4 c = vec4(0.0);
vec4 y = vec4(0.0);
vec4 t = vec4(0.0);

for (int i = 0 - int(inputNorth); i <= int(inputSouth); i++)
{
for (int j = 0 - int(inputEast); j <= int(inputWest); j++ )
{
if (inputUnits == 0.0) // sum of values
sum += vec4(unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, j))))) - c);
else if (inputUnits == 1.0) // sum of distances
sum += vec4(distance(pixel, vec4(unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, j))))) - c)));
}
t = vec4(sum + y);
c = (t - y) - sum;
y = t;
}
float divisor = ((inputNorth + inputSouth) + 1.0) * ((inputEast + inputWest) + 1.0);
vec4 mean = vec4(sum / vec4(divisor));

vec4 variance = vec4(sqrt(pow(pixel - mean, vec4(2.0)))); // variance

if (inputUnits == 1.0) // mean distance
{
variance = vec4(vec3(distance(pixel.rgb, variance.rgb)), 1.0);
}

// if pixel > mean ...
pixel.rgb = (float(pixel) < float(mean)) ? pixel.rgb - variance.rgb : vec3(0.0);
return premultiply(vec4(vec3(pixel.rgb), 1.0));

}




/*
kernel vec4 shiftedDataVarianceKernel(sampler u, float inputUnits, float inputNorth, float inputSouth, float inputEast, float inputWest)
{
    vec4 pixel = unpremultiply(sample(u, samplerCoord(u)));
    vec2 xy = destCoord();
    vec4 sum  = vec4(0.0);

    vec4 c = vec4(0.0);
    vec4 y = vec4(0.0);
    vec4 t = vec4(0.0);

    for (int i = 0 - int(inputNorth); i <= int(inputSouth); i++)
    {
        for (int j = 0 - int(inputEast); j <= int(inputWest); j++ )
        {
            if (inputUnits == 0.0) // sum of values
                sum += vec4(unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, j))))) - c);
            else if (inputUnits == 1.0) // sum of distances
                sum += vec4(distance(pixel, vec4(unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, j))))) - c)));
        }
        t = vec4(sum + y);
        c = (t - y) - sum;
        y = t;
    }
    float divisor = ((inputNorth + inputSouth) + 1.0) * ((inputEast + inputWest) + 1.0);
    vec4 mean = vec4(sum / vec4(divisor));

    vec4 sum_sqr = vec4(0.0);
    for (int i = 0 - int(inputNorth); i <= int(inputSouth); i++)
    {
        for (int j = 0 - int(inputEast); j <= int(inputWest); j++ )
        {
            if (inputUnits == 0.0) // sum of values
            {
                sum_sqr += vec4(unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, j))))) - c) - mean;
                sum_sqr += pow(vec4(unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, j))))) - c) - mean, vec4(2.0));
            }
            else if (inputUnits == 1.0) // sum of distances
            {
                sum_sqr += vec4(distance(pixel, vec4(unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, j))))) - c))) - mean;
                sum_sqr += pow(vec4(distance(pixel, vec4(unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, j))))) - c))) - mean, vec4(2.0));
            }
        }
        t = vec4(sum_sqr + y);
        c = (t - y) - sum_sqr;
        y = t;
    }

    vec4 variance = (sum_sqr - (sum * sum)/vec4(divisor))/(vec4(divisor) - vec4(1.0));

return variance;
}
*/