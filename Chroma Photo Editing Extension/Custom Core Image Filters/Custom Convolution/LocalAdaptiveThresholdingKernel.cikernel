/*
 A Core Image kernel routine that computes a multiply effect.
 The code looks up the source pixel in the sampler and then multiplies it by the value passed to the routine.
 */

kernel vec4 localAdaptiveThresholdKernel(sampler image, float inputThresholdType)
{
    vec4 pixel = unpremultiply(sample(image, samplerCoord(image)));
    vec2 xy = destCoord();
    vec4 sum = vec4(0.0);
    for (int i = -1; i < 1; i++)
    {
        for (int j = -1; j < 1; j++)
        {
            sum += unpremultiply(sample(image, samplerTransform(image, xy + vec2(i, j))));
        }
    }
    vec4 mean = vec4(sum / vec4(9.0));
    vec4 sd = (normalize(sqrt(((pow(sum - mean, vec4(2.0))) / vec4(9.0)))) / pixel);
    
    if (inputThresholdType == 1.0)
    {
        vec3 grayXfer = vec3(0.3, 0.59, 0.11);
        vec3 gray = vec3(dot(grayXfer, pixel.rgb));
        vec4 threshold = (float(pixel) >= float(mean + sd)) ? vec4(vec3(mix(pixel.rgb, gray, 1.0)), 1.0) : vec4(vec3(mix(pixel.rgb, gray, 1.0)), 1.0);
        /* return premultiply(vec4(vec3(mix(vec3(0.0), pixel.rgb, vec3(vec3(1.0) - vec3(mean.rgb + sd.rgb)))), 1.0)); */
        return premultiply(vec4(vec3(threshold.rgb), 1.0));
    }
    else if (inputThresholdType == 2.0)
    {
        vec4 threshold = (float(pixel) >= float(vec4(vec3(distance(pixel.rgb, mean.rgb)), 1.0))) ? vec4(1.0) : vec4(0.0);
        return premultiply(vec4(vec3(pixel.rgb - threshold.rgb), 1.0));
    }
}
