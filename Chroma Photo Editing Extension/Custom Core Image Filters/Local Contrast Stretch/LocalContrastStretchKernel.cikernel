kernel vec4 localContrastStretchKernel(sampler u)
{
vec4 pixel = unpremultiply(sample(u, samplerCoord(u)));
vec2 xy = destCoord();
vec4 meanmax;
vec4 meanmin;
vec4 finalmax = vec4(0.0);
vec4 finalmin = vec4(1.0);
vec4 mixel;

// Per-channel max values
float maxr = 0.0;
float maxg = 0.0;
float maxb = 0.0;

// Per-channel min values
float minr = 1.0;
float ming = 1.0;
float minb = 1.0;
int radius = 4;

for (int x = 0; x < radius; x++)
{
for (int y = 0; y < radius; y++)
{
mixel = sample(u, samplerTransform(u, xy+vec2(x, y)));
// Process max for each channel
maxr = max(maxr, mixel.r);
maxg = max(maxg, mixel.g);
maxb = max(maxb, mixel.b);
meanmax.rgb = vec3(maxr, maxg, maxb);

// Process min for each channel
minr = min(minr, mixel.r);
ming = min(ming, mixel.g);
minb = min(minb, mixel.b);
meanmin.rgb = vec3(minr, ming, minb);
}
}
finalmax.rgb = max(meanmax.rgb, finalmax.rgb);
finalmin.rgb = min(meanmin.rgb, finalmin.rgb);

for (int x = 0; x < radius; x++)
{
for (int y = 0 - radius; y < 0; y++)
{
mixel = sample(u, samplerTransform(u, xy+vec2(x, y)));
// Process max for each channel
maxr = max(maxr, mixel.r);
maxg = max(maxg, mixel.g);
maxb = max(maxb, mixel.b);
meanmax.rgb = vec3(maxr, maxg, maxb);

// Process min for each channel
minr = min(minr, mixel.r);
ming = min(ming, mixel.g);
minb = min(minb, mixel.b);
meanmin.rgb = vec3(minr, ming, minb);
}
}
finalmax.rgb = max(meanmax.rgb, finalmax.rgb);
finalmin.rgb = min(meanmin.rgb, finalmin.rgb);

for (int x = 0 - radius; x < 0; x++)
{
for (int y = 0 - radius; y < 0; y++)
{
mixel = sample(u, samplerTransform(u, xy+vec2(x, y)));
// Process max for each channel
maxr = max(maxr, mixel.r);
maxg = max(maxg, mixel.g);
maxb = max(maxb, mixel.b);
meanmax.rgb = vec3(maxr, maxg, maxb);

// Process min for each channel
minr = min(minr, mixel.r);
ming = min(ming, mixel.g);
minb = min(minb, mixel.b);
meanmin.rgb = vec3(minr, ming, minb);
}
}
finalmax.rgb = max(meanmax.rgb, finalmax.rgb);
finalmin.rgb = min(meanmin.rgb, finalmin.rgb);

for (int x = 0 - radius; x < 0; x++)
{
for (int y = 0; y < radius; y++)
{
mixel = sample(u, samplerTransform(u, xy+vec2(x, y)));
// Process max for each channel
maxr = max(maxr, mixel.r);
maxg = max(maxg, mixel.g);
maxb = max(maxb, mixel.b);
meanmax.rgb = vec3(maxr, maxg, maxb);

// Process min for each channel
minr = min(minr, mixel.r);
ming = min(ming, mixel.g);
minb = min(minb, mixel.b);
meanmin.rgb = vec3(minr, ming, minb);
}
}
finalmax.rgb = max(meanmax.rgb, finalmax.rgb);
finalmin.rgb = min(meanmin.rgb, finalmin.rgb);

/*pixel.rgb = vec3((pixel.rgb - vec3(minr, ming, minb)) * (vec3(vec3(1.0) / (vec3(maxr, maxg, maxb) - vec3(minr, ming, minb)))));*/


pixel.rgb = (vec3(finalmax.rgb - finalmin.rgb) + vec3(distance(finalmax.rgb, finalmin.rgb))) / vec3(2.0);
return premultiply(pixel);

}

