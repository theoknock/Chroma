kernel vec4 directionalMeanKernel(sampler u, float inputOperator, float inputNorth, float inputSouth, float inputEast, float inputWest)
{
    vec4 pixel = unpremultiply(sample(u, samplerCoord(u)));
    vec2 xy = destCoord();
    vec4 sum  = vec4(0.0);
    inputOperator = 6.0;
    inputNorth = 1.0;
    inputSouth = 1.0;
    inputEast = 1.0;
    inputWest = 1.0;
    if (inputOperator == 1.0)
    {
        for (int i = 0 - int(inputNorth); i <= int(inputSouth); i++)
        {
            for (int j = 0 - int(inputEast); j <= int(inputWest); j++ )
            {
                if (i != 0)
                    if (j != 0)
                        sum += sample(u, samplerTransform(u, vec2(xy + vec2(i, j))));
            }
        }
        float divisor = ((abs(0.0 - inputNorth) + abs(inputSouth)) * (abs(0.0 - inputEast) + abs(inputWest)) - 1.0);
        vec4 mean = vec4(sum / vec4(divisor));
        
        return premultiply(vec4(vec3(abs(pixel.rgb - mean.rgb)), 1.0));
    }
    else if (inputOperator == 2.0)
    {
        vec4 meanmax;
        vec4 meanmin;
        vec4 mixel;
        
        float maxr = 0.0;
        float maxg = 0.0;
        float maxb = 0.0;
        
        float minr = 1.0;
        float ming = 1.0;
        float minb = 1.0;
        
        for (int i = 0 - int(inputNorth); i <= int(inputSouth); i++)
        {
            for (int j = 0 - int(inputEast); j <= int(inputWest); j++ )
            {
                mixel = sample(u, samplerTransform(u, xy+vec2(i, j)));
                
                maxr = max(maxr, mixel.r);
                maxg = max(maxg, mixel.g);
                maxb = max(maxb, mixel.b);
                meanmax.rgb = vec3(maxr, maxg, maxb);
                
                minr = min(minr, mixel.r);
                ming = min(ming, mixel.g);
                minb = min(minb, mixel.b);
                meanmin.rgb = vec3(minr, ming, minb);
            }
        }
        return premultiply(vec4(vec3(clamp(abs(meanmax.rgb - meanmin.rgb), 0.0, 1.0)), pixel.a));
    }
    else if (inputOperator == 3.0)
    {
        int northBounds = (int(inputNorth) - 1) / 2;
        int southBounds = (int(inputSouth) - 1) / 2;
        int eastBounds = (int(inputEast) - 1) / 2;
        int westBounds = (int(inputWest) - 1) / 2;
        vec4 sum  = vec4(0.0);
        for (int i = (0 - northBounds); i <= southBounds; i++)
        {
            for (int j = (0 - eastBounds); j <= westBounds; j++ )
            {
                sum += unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, j)))));
            }
        }
        int divisor = (northBounds + southBounds) * (eastBounds + westBounds);
        vec4 mean = vec4(sum / vec4(divisor));
        float mean_avg = float(mean);
        float comp_avg = 0.0;
        vec4 comp  = vec4(0.0);
        vec4 median  = mean;
        for (int i = (0 - northBounds); i <= southBounds; i++)
        {
            for (int j = (0 - eastBounds); j <= westBounds; j++ )
            {
                comp = unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, j)))));
                comp_avg = float(comp);
                median = (comp_avg < mean_avg) ? max(median, comp) : median;
            }
        }
        
        return premultiply(vec4(vec3(abs(pixel.rgb - median.rgb)), 1.0));
        
    }
    else if (inputOperator == 4.0) /* Mode Filter (truncated median) */
    {
        int northBounds = (int(inputNorth) - 1) / 2;
        int southBounds = (int(inputSouth) - 1) / 2;
        int eastBounds = (int(inputEast) - 1) / 2;
        int westBounds = (int(inputWest) - 1) / 2;
        vec4 sum  = vec4(0.0);
        vec4 minimum = vec4(1.0);
        for (int i = (0 - northBounds); i <= southBounds; i++)
        {
            for (int j = (0 - eastBounds); j <= westBounds; j++ )
            {
                sum += unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, j)))));
                minimum = min(minimum, unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, j))))));
            }
        }
        int divisor = ((northBounds + southBounds) * (eastBounds + westBounds) - 1);
        vec4 mean = vec4((sum - minimum) / vec4(divisor));
        float mean_avg = float(mean);
        float min_avg = float(minimum);
        float comp_avg = 0.0;
        vec4 comp  = vec4(0.0);
        vec4 mode  = mean;
        for (int i = (0 - northBounds); i <= southBounds; i++)
        {
            for (int j = (0 - eastBounds); j <= westBounds; j++ )
            {
                comp = unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, j)))));
                comp_avg = float(comp);
                mode = (comp_avg < mean_avg) ? ((comp_avg != min_avg) ? max(mode, comp) : mode ) : mode ;
            }
        }
        
        return premultiply(vec4(vec3(abs(pixel.rgb - mode.rgb)), 1.0));
        
    }
    else if (inputOperator == 5.0) /* Hybrid Median Filter */
    {
        /* First median */
        int northBounds = (int(inputNorth) - 1) / 2;
        int southBounds = (int(inputSouth) - 1) / 2;
        int eastBounds = (int(inputEast) - 1) / 2;
        int westBounds = (int(inputWest) - 1) / 2;
        vec4 sum  = vec4(0.0);
        for (int i = (0 - northBounds); i <= southBounds; i++)
        {
            sum += unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, 0)))));
        }
        
        for (int j = (0 - eastBounds); j <= westBounds; j++ )
        {
            sum += unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(0, j)))));
        }
        
        int divisor = (northBounds + southBounds) + (eastBounds + westBounds);
        vec4 mean = vec4(sum / vec4(divisor));
        float mean_avg = float(mean);
        float comp_avg = 0.0;
        vec4 comp  = vec4(0.0);
        vec4 median_1  = mean;
        
        for (int i = (0 - northBounds); i <= southBounds; i++)
        {
            comp = unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, 0)))));
            comp_avg = float(comp);
            median_1 = (comp_avg < mean_avg) ? max(median_1, comp) : median_1 ;
        }
        
        for (int j = (0 - eastBounds); j <= westBounds; j++ )
        {
            comp = unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(0, j)))));
            comp_avg = float(comp);
            median_1 = (comp_avg < mean_avg) ? max(median_1, comp) : median_1 ;
        }
        
        /* Second median */
        vec4 sum_2  = vec4(0.0);
        
        for (int i = (0 - northBounds); i <= southBounds; i++)
        {
            sum_2 += unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, i)))));
        }
        
        for (int j = (0 - eastBounds); j <= westBounds; j++ )
        {
            sum_2 += unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(j, j)))));
        }
        vec4 mean_2 = vec4(sum_2 / vec4(divisor));
        vec4 median_2  = mean_2;
        float mean_avg_2 = float(mean_2);
        float comp_avg_2 = 0.0;
        vec4 comp_2  = vec4(0.0);
        
        for (int i = (0 - northBounds); i <= southBounds; i++)
        {
            comp_2 = unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, i)))));
            comp_avg_2 = float(comp_2);
            median_2 = (comp_avg_2 < mean_avg_2) ? max(median_2, comp_2) : median_2 ;
        }
        
        for (int j = (0 - eastBounds); j <= westBounds; j++ )
        {
            comp_2 = unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(j, j)))));
            comp_avg_2 = float(comp_2);
            median_2 = (comp_avg_2 < mean_avg_2) ? max(median_2, comp_2) : median_2 ;
        }
        
        vec4 [GlobalCIImage sharedSingleton].ciImage = max(pixel, max(median_1, median_2));
        
        return premultiply(vec4(vec3(abs(pixel.rgb - [GlobalCIImage sharedSingleton].ciImage.rgb)), 1.0));
        
    }
    else if (inputOperator == 6.0) /* Mean Absolute Deviation */
    {
        /* First median */
        int northBounds = (int(inputNorth) - 1) / 2;
        int southBounds = (int(inputSouth) - 1) / 2;
        int eastBounds = (int(inputEast) - 1) / 2;
        int westBounds = (int(inputWest) - 1) / 2;
        vec4 sum  = vec4(0.0);
        for (int i = (0 - northBounds); i <= southBounds; i++)
        {
            sum += unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, 0)))));
        }
        
        for (int j = (0 - eastBounds); j <= westBounds; j++ )
        {
            sum += unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(0, j)))));
        }
        
        int divisor = (northBounds + southBounds) + (eastBounds + westBounds);
        vec4 mean = vec4(sum / vec4(divisor));
        float mean_avg = float(mean);
        float comp_avg = 0.0;
        vec4 comp  = vec4(0.0);
        vec4 median_1  = mean;
        
        for (int i = (0 - northBounds); i <= southBounds; i++)
        {
            comp = unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, 0)))));
            comp_avg = float(comp);
            median_1 = (comp_avg < mean_avg) ? max(median_1, comp) : median_1 ;
        }
        
        for (int j = (0 - eastBounds); j <= westBounds; j++ )
        {
            comp = unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(0, j)))));
            comp_avg = float(comp);
            median_1 = (comp_avg < mean_avg) ? max(median_1, comp) : median_1 ;
        }
        
        /* Second median minus first median */
        vec4 sum_2  = vec4(0.0);
        
        for (int i = (0 - northBounds); i <= southBounds; i++)
        {
            sum_2 += median_1 - unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, i)))));
        }
        
        for (int j = (0 - eastBounds); j <= westBounds; j++ )
        {
            sum_2 += median_1 - unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(j, j)))));
        }
        vec4 mean_2 = vec4(sum_2 / vec4(divisor));
        vec4 median_2  = mean_2;
        float mean_avg_2 = float(mean_2);
        float comp_avg_2 = 0.0;
        vec4 comp_2  = vec4(0.0);
        
        for (int i = (0 - northBounds); i <= southBounds; i++)
        {
            comp_2 = unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, i)))));
            comp_avg_2 = float(comp_2);
            median_2 = (comp_avg_2 < mean_avg_2) ? max(median_2, comp_2) : median_2 ;
        }
        
        for (int j = (0 - eastBounds); j <= westBounds; j++ )
        {
            comp_2 = unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(j, j)))));
            comp_avg_2 = float(comp_2);
            median_2 = (comp_avg_2 < mean_avg_2) ? max(median_2, comp_2) : median_2 ;
        }
        
        return premultiply(vec4(vec3(abs(pixel.rgb - median_2.rgb)), 1.0));
        
    }
    
    
}