/*
A Core Image kernel routine that computes a multiply effect.
The code looks up the source pixel in the sampler and then multiplies it by the value passed to the routine.
*/

kernel vec4 dissimilarityKernel(sampler image)
{
vec4 pixel = unpremultiply(sample(image, samplerCoord(image)));

vec2 xy = destCoord();
vec4 mean  = vec4(0.0);

for (int i = -4; i <= 4; i++)
{
for (int j = -4; j <= 4; j++ )
{
mean  += sample(image, samplerTransform(image, xy+vec2(i, j)));
}
}

vec4 size = vec4(81.0);
mean = vec4(pow(vec4(sqrt(mean / size)), vec4(2.0)));


vec3 dixel = vec3(abs(mean.rgb - pixel.rgb));
dixel = vec3(pow(dixel, vec3(2.0)));

return premultiply(vec4(vec3(dixel), pixel.a));
}
