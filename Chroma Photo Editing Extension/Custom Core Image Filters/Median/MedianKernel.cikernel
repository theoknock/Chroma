kernel vec4 medianKernel(sampler u, float inputUnits, float inputNorth, float inputSouth, float inputEast, float inputWest)
{
vec4 pixel = unpremultiply(sample(u, samplerCoord(u)));
vec2 xy = destCoord();
vec4 sum  = vec4(0.0);

    vec4 c = vec4(0.0);
    vec4 y = vec4(0.0);
    vec4 t = vec4(0.0);
    for (int i = 0 - int(inputNorth); i <= int(inputSouth); i++)
    {
    for (int j = 0 - int(inputEast); j <= int(inputWest); j++ )
    {
        if (inputUnits == 0.0) // sum of values
            sum += vec4(unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, j))))) - c);
        else if (inputUnits == 1.0) // sum of distances
            sum += vec4(distance(pixel, vec4(unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, j))))) - c)));
    }
        t = vec4(sum + y);
        c = (t - y) - sum;
        y = t;
    }

float divisor = ((inputNorth + inputSouth) + 1.0) * ((inputEast + inputWest) + 1.0);
vec4 mean = vec4(sum / vec4(divisor));
float mean_avg = float(mean);
float comp_avg = 0.0;
vec4 comp  = vec4(0.0);
vec4 median  = mean;
    for (int i = 0 - int(inputNorth); i <= int(inputSouth); i++)
    {
        for (int j = 0 - int(inputEast); j <= int(inputWest); j++ )
        {
            comp = unpremultiply(sample(u, samplerTransform(u, vec2(xy + vec2(i, j)))));
            comp_avg = float(comp);
            median = (comp_avg < mean_avg) ? max(median, comp) : median;
        }
    }

    vec4 [GlobalCIImage sharedSingleton].ciImage = vec4(0.0);
    if (inputUnits == 0.0) // median value
    {
        [GlobalCIImage sharedSingleton].ciImage = premultiply(vec4(vec3(vec3(abs(pixel.rgb - median.rgb))), 1.0));
    }
    else if (inputUnits == 1.0) // median distance
    {
        [GlobalCIImage sharedSingleton].ciImage = premultiply(vec4(vec3(pixel.rgb - vec3(distance(pixel.rgb, median.rgb))), 1.0));
    }

return [GlobalCIImage sharedSingleton].ciImage;
}